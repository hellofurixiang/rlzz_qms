def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.szrlzz.qms"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 2
        versionName 'QMS.3.0.2'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //签名配置
    signingConfigs {
        release {
            keyAlias 'ruilian'
            keyPassword 'ruilian123456'
            storeFile file('../rlzz_qms.jks')
            storePassword 'ruilian123456'
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            /*ndk {
                //选择要添加的对应 cpu 类型的 .so 库。
                abiFilters  "x86"
                // 还可以添加
            }*/
            //ndk { abiFilters "x86" }
            ndk {
                // 设置支持的SO库架构
                //abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
                abiFilters  "armeabi-v7a"//, "x86", "mips", "arm64-v8a"
            }
        }

    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    //buildToolsVersion = '28.0.3'
    /*android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${releaseTime()}-${defaultConfig.versionName}.apk"
        }
    }*/
}

static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08:00"))
}

flutter {
    source '../..'
}

dependencies {

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.2'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.2'
    implementation 'org.jetbrains:annotations:15.0'
    implementation 'com.tencent.bugly:crashreport_upgrade:1.4.1'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.2.0
    implementation 'com.tencent.bugly:nativecrashreport:3.7.1'
    //implementation 'jcifs:jcifs:1.3.17'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    implementation 'org.samba.jcifs:jcifs:1.3.18-kohsuke-1'

}
